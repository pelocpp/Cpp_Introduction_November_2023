Guten Morgen

Einführung in C++

Peter Loos

=====================================

So zwischen 12 und 13 Uhr

=====================================

C/C++    Java  C#  Mobile Programming

=====================================

Unterlagen:

Allgemeine:

https://github.com/pelocpp

Für dieses Seminar:

https://github.com/pelocpp/Cpp_Introduction_November_2023

Immer verfügbar:
================

https://github.com/pelocpp/cpp_introduction

Noch ein Repository:

Viele einführende Beispiele:

https://github.com/pelocpp/cpp_basic_examples


Für Studierende und Liebhaber von C++ :)

https://peterloos.de/

=====================================



2 Tools:

a) Visual Studio C++

b) Github: Repository - "Jungfern-Seminar"

   i)  Für dieses Seminar
   ii) Mit Vorlagen zum Kopieren / zum Nachschlagen (NEU)

Github:

https://github.com/pelocpp


Feedback:

== Vorrausetzungen

== Was sind meine Erwartungen

== Was fehlt ???


=== 10 Uhr / 17 Uhr:  FEEDBACK

=== Python // C# (Konzepte)

Lambda, 


=====================================

Hello - World.

=====================================

Klassen und Objekt

>> Daten

    e.g. Adresse

>> Funktionen // besser: Methoden

    changeAddress

OO Programmierung:
   Daten + Methoden (Funktion) zusammenzufassen
   in einem EINZIGEN Konstrukt


Klasse:  Beschreibung von Daten + Funktionen (Implementierung)

class Person

Ich will einen 'Person' haben:   Person hans;   // OBJEKT der KLASSE

OBJEKT synonym:  INSTANZ

=====================================

In C++: 2 Dateien

Anders als in C#, Java

Header-File  :  Description

Implementierungs-Datei:  Implementierung



=====================================

Beispiel:   Uhrzeit   // Time

Daten:

Stunden   //  Hours
Minuten   //  Minutes
Sekunden  //  Seconds

Methoden:

= Ausgabe in der Konsole (print)

= Eine Uhrzeit: Eine Sekunde weiterschlalten 

     increment  // move 1 second forward

     10:08:58   ==> 10:08:59      ==> 10:08:60  FALSCH  // Korrekt: 10:09:00      

= Vergleichen // compare

= reset: Alles Werte auf Null setzen

// =============================================

OO: Kennt einen Schutz von Daten  // Making Data secure

Access Rights:


// =============================================

Beispiel:

Programming STYLE

this : usage of this

I would prefer another programming STYLE


m_stunden:  member

stunden:    parameter

// =============================================

Pointer and References

C:   Pointer

C++: Reference

Beobachung: C ist in C++ enthalten ==> In C++ haben wir Pointer UND Referenzen

Wichtig bei dynamischem Speicher

-----------------------------------

void* malloc ( int size );


Frage: Wollen wir Speicher für int, double, Time, Rectangle, ....

Hack:  int*

Nein: Weil man nicht weiß, wofür der Speicher eigentlich ist:

     Aus Sicht von malloc:  void *  // Festlegung.


Wieviele Byte hat ein Rectangle:   sizeof (int)   sizeof (Rectangle)

// ======================================================

Was ist eine Referenz ???

What is a Reference

A) Es ist ein Alias-Name für eine andere Variable (Objekt)
   It's an alias (name) for another variable (object)

B) Intern:  Haben wir eine Adresse
   Intern:  We have an address

C) Schreibweise: EINFACHER als Pointer (Zeiger)
   Notation:     Simpler than Pointer - Syntax


=====================================

Wie kann ich statische Daten und die Klasse BankAccount zusammenführen ?

Wer vergibt eine Kontonummer ???

Die Sparkasse:

Information: Welche Kontonummer ist als nächstes verfügbar ???

Beispiel:  12345  ==> 12346

Frage:  Habe bereits viele BankAccount-Objekte ....


=====================================


Ich möchte zwei Konten vergleichen   // compare two accounts

A) Gleichheit:  Kontonummern sind gleich und Balance   // equal

b) Kleiner oder größer:  "Wer hat mehr Geld"   // who has more money  // less-than or greate-than


==>   Parameter


=====================================

Was ist eines der prinzipiellen Probleme von C++:

Es entstehen Kopien - an vielen Stellen, wo man es nicht möchte.
---------------------------------------------------------------

A) Die SW läuft (kein Fehler)

B) PERFORMANCE


Warum kennen zB Java und C# dieses Problem nicht ??????????

i) Java, C#,...  DON'T HAVE OBJECTS ON THE STACK

   Diese Sprachen kennen NUR DYNAMISCHE OBJEKTE  ( new, delete // malloc / free )

   HIER WERDEN NUR POINTER KOPIERT (KEINE DATENBEREICHE)



ii) C++ ist komplizierter als Java und C#


=====================================

Call-by-Reference:

A) Okay, ich kann auf dieses Weise auf das Original zugreifen.

b) Aber / UND: Diese Übergabe von Paramtern ist auch SCHNELLER  !!!!!!!!!!

BETTER PERFORMANCE.

=====================================


Error	C2662	'void BankAccount::deposit(double)': 


cannot convert 'this' pointer from 'const BankAccount' to 'BankAccount &'


=====================================

Was ist der tiefere Grund von 'const'

Gibt es da etwas Wichtiges ???

Ja:  Je mehr 'const' im Programm verwenden, umso besser kann der Compiler OPTIMIEREN !!!

Pipeling:  

=====================================

Der Adreßoperator & bei Referenzen

=====================================

    tmp = anInteger;
00007FF741E9A92B  mov         eax,dword ptr [anInteger]  
00007FF741E9A92E  mov         dword ptr [tmp],eax  

    tmp = rSomeRef;
00007FF741E9A931  mov         rax,qword ptr [rSomeRef]  
00007FF741E9A935  mov         eax,dword ptr [rax]  
00007FF741E9A937  mov         dword ptr [tmp],eax  


=====================================

Referenzen:

A) Ja, bitte verwenden

B) Es ist nur ein '&' am Datentyp notwendig.

C) mit 'const' kann ist das Original schützen.

D) Unter uns: geht auch ohne Referenz --- läuft etwas langsamer

================================================================

Beobachtung:

// comparison: Equality
if ( firstAccount.equals (secondAccount) == true ) {

    // sind gleich
}

// 
if ( firstAccount == secondAccount ) {

    // sind gleich
}

Überladen von Operatoren:  // Overloading of Operators
------------------------------------------------------

Time // Uhrzeit

Time t1, t2:

if (t1 == t2)

if (t1 < t2)


Wie geht das ???

A) Wir das Schreiben einer "normalen" Method

B) Was ist der Name dieser "normalen" Methode:  

    'operator' '=='  oder
    'operator' '<'  oder


Geht für fast alle Operatoren von C/C++:

Time = t1 + t2;


Achtung:

Ziel:

    if (t1 == t2) {

        std::cout << "Gleichheit";
    }

Würde ich eine equals-Methode verwenden:

    if (t1.equals (t2)) {

        std::cout << "Gleichheit";
    }


-----------------------------

A) Wenn ich der Besitzer der Klasse bin:

   Ich kann die Klasse erweitern ...

B) Ich bin NICHT der Besitzer der Klasse:

   Auch dann kann man Operatoren überladen:

   Als globale Funktionen :)


=========================================================

Feature: 

Friendship ===  VORSICHT.

Es werden alle PRIVATEN Daten für einen "Freund"

PUBLIC zur Verfügung gestellt.

=========================================================

Fazit:

Operatoren überladen:

A) In der Klasse

B) Als globale Funktion (friend)

=========================================================

Mittwoch:

Pascal   // Zeiger // Häubchen

=========================================================

Ich möchte Klassen mit DEMSELBEN Namen haben zB. für

  * Test
  * Prototyp-Entwicklung
  * Produktiv-Betrieb

Da kommt es zu KONFLIKTEN // Ambiguity 

Lösung: Klassen mit DEMSELBEN Namen in Namensräumen ablegen.

Warum ist das eine Lösung:

Die Klasse Rectangle heißt jetzt

AwesomeRectangle::Rectangle

oder

BeautifulRectangle::Rectangle

// ===============================================

Ein- / Ausgabe   // Input / Output

Konzept: Strom / Stream

== Schreiben in einen Strom
== Lesen aus einem Strom

Idee: Abstraktion

Strom:  Bildschirm (Konsole), Datei (File), Socket-Verbindung, Tastatur

Idee:  Eines "sprechenden" operators // Speaking identifier: 


int temperature;

Operators:  <<,  >>    // Symbolic:   Pfeil // Schreiben in einen Strom

Standard-Ströme // Standard- Streams:

Konsole:  std::cout

Keyboard: std::cin

============================================================

2 Tage:  Grundlagen gelernt

Standard Template Bibliothek (Library): STL

Zeichenketten:  "Viele Zeichen"

Konzepte der OO:    std::string

a) Konstruktoren:

   Mit einem Parameter: Konstante Zeichenkette

b) Operatoren:

   << für Ausgabe vorhanden.

c) getter:


   int <=== size ()     // getSize
   int <=== length ()   // getLength

   BESSER:

   size_t <=== size ()     // getSize
   size_t <=== length ()   // getLength


   bool  <=== empty();

Was ist size_t ???

Historie:   Eine Länge wie 10 Zeichen entspricht einem ganzzahligen Wert

            int :

            Puristen: ein int kann einen negativen Wert haben.

            Lösing: Man hat in der "Neuzeit": Man wähle einen

            integralen Datentyp OHNE Vorzeichen:  vorzeichenlos

            unsigned int
            size_t == unsigned __int64

== Methoden:

insert   // einfügen

replace  // ersetzen

append   // anhängen


substr   // Eine Teilzeichenkette bestimmen  (  von ... wie viele // from .. count)

== Operator: Verleichsoperator // Comparison Operator

   Test auf Gleichheit: Test for equality

[] Operator: Index-Operator

+ - Operator: to concatenate two strings // 2 Zeichenketten aneinanderhängen

// append: Geht auch mit append:

Oft: SAME Functionality either with a method or an operator

     ( eqals // operator ==  )

=====================================

Dynamische Speicherverwaltung:

new   ==>   1 Variable
new[N] ==>  N Variables   N muss konstant sein

Ich erhalte in beiden Fällen einen Zeiger:

int *ip;

INTERESSANTES SPRACHFEATURE:

Mit einem Zeiger (Anfangsadresse) kann ich SYNTAKTISCH
wie mit einem Feld (Array) arbeiten:

With a pointer i can work the same way like with an array:

==================================================

By the way:

Maschinenraum von C++

==================================================

Es gibt new in 2 Ausprägungen:

new    ==>   1 Variable    scalar new
new[N] ==>   N Variables   array new

Es gibt delete in 2 Ausprägungen:

delete ptr;      // <=== scalar new  
delete[] ptr;    // <=== array new  

==================================================

C++ ist eine der kompliziertesten Sprachen.

Ein Beispiel:

a) calling new[]
b) calling delete (according to new[])

UB

Undefined Behaviour

===========================================================

Eine Anwendung // ein Gebrauch von dynamischen Daten:

new-Aufruf:  Zeiger (Halde)

Beispiel:

Ein - in C/C++ eingebautes Feld:

int numbers[10];    // built-in array

FIXED SIZE

Lösung für ein Feld dynamischer Länge: wir schreiben eine Klasse.

AChtung:

Neben dem Konstruktor benötigen wir einen Destuktor:

Um den mit new belegten Speicherplatz freizugeben !!!

Der Aufruf des Destruktors wird AUTOMATISCH abgesetzt !!!

Zugriff auf die Daten des dynamischen Arrays:

Mit at.

"Here references are shining"


"Here operator overloading is shining"

// ================================================

Heap:

How is the heap managed ?????????????????????

== Simple: By us  // with the help of new and delete.


Destructor:

How are the Destructor calls managed ?????????????????????

== Automatically: The calls are generated automatically.

== BUT: The contents of the Destructor: we are responsible.

// ================================================

Lifetime  // Lebenszeit von Objekten:

A) Globales Objekt:

Konstruktoren werden VOR main gerufen.
Destruktoren werden NACH main gerufen.

B) Lokales Objekt:

Konstruktoren werden bei Objekterzeugung gerufen.
Destruktoren werden am Ende des Blocks gerufen.

C) Dynamisches Objekt:

Konstruktoren werden bei der Objekterzeugung mit NEW gerufen.
Destruktoren werden beim Aufruf von delete gerufen.

// ================================================

Vererbung:
----------

Überlegung:  SW - Design

Klasse Rectangle:  In einem 2-dim graph. System


Klasse CororedRectangle:  Klasse in einem 2-dim graph. System,
                          die Farben kennt.

Aussage:
--------

CororedRectangle hat in der Beschreibung mehr Daten als das Rechteck.

Ein CororedRectangle ist ein Rechteck.

A CororedRectangle "is a" Rectangle.

Aussage:
--------

Das Prinzip der Vererbung kann nicht IMMER eingesetzt werden:
Der Compiler ist hier keine Hilfestellung.

Ein CororedRectangle ist ein Rechteck.

==> "ist ein":  Beziehungen zwischen Klassen // Relationship // Modellierung.

    "is a" Relationship

2. Beispiel:

Klasse Point (Punkt):

Klasse Line (Linie):

== A Point is a part of a Line
== Ein Punkt ist ein Teil einer Linie

== Ein Linie besteht aus mindestens zwei Punkten

Lösung: 

==> Eine Linie hat zwei Punkte (Anfangs- und Endpunkt)

==  A line has two points

==> "hat ein":  Beziehungen zwischen Klassen // Relationship // Modellierung.

    "has a" Relationship

Wozu:  Zur Klärung, welche Instanzvariablen soll meine Klasse haben ?

class Line {

    // member data
    Point m_begin;
    Point m_end;
    ....
}

class Student {

   std::string m_firstName;
   std::string m_lastName;
   std::string m_matrikelNummer;

   // Adresse

   // Noten ???

   // Semester ???

   // Studienfach ???
}

// ========================================================

Vererbung:

Nur, wenn ist-ein Beziehung erfüllt ist.

// ========================================================

Wozu / Why Vererbung / Inheritance:

Source-Code wiederverwenden.  // Re-Use existung software

== Suche nach Fehler ...
== Funktionalität ergänzen ...

// ========================================================

Achtung:

Bei der Vererbung sind

KONSTRUKTOREN

NICHT DABEI.

// constructors are NOT inherited.

==============================================================

Eine Methode mit DEMSELBEN Namen in der Vaterklasse und Kindklasse:

A) Geht.

B) Overriding // überschreiben:

Am Rand // Bemerkung:

überschreiben: 

Anekdote:  Es gab einmal ein Buch über C++ in ENGLISCH

Der erste, deutsche Übersetzer hat das Wort override mit "überschreiben" übersetzt.

====> Alle anderen haben dies übernommen // abgeschrieben.

FALSCH // irreführend

schreiben:  to write

überschreiben:  overwrite


to overRIDE

sich über etw. hinwegsetzen
gegen etw. vorgehen
Vorrang vor etw. haben


VORSICHT: Das Überschreiben führt zum VERDECKEN // Hidung, to Hide 

========================================================

Wiederverwendung:   // Re-Use

EG calling methods of the Base Class


========================================================

Vererbung:

Die Vererbung in der Objekt-Orientierung hat 3 "Ausprägungen":

Inheritance exists in 3 "Flavours":


A) Methode ist in der Vaterklasse vorhanden - und NICHT in der Kindklasse:

Die Kindklasse "erbt" eine Methode.

Child class INHERITS a Method.


B) Methode ist in der Vaterklasse vorhanden - und wird in der Kindklasse überschrieben:

Die Kindklasse ersetzt die Methode in der Vaterklasse.
Die Kindklasse tauscht die Methode in der Vaterklasse aus.

The Child Class REPLACES the method of the Base Class.

Hmmmm // will ich das ??? // Code Smell // Vorsicht: Könnte auch auf Fehler hindeuten.


C) Methode ist in der Vaterklasse vorhanden - wird in der Kindklasse überschrieben 

   und die Methode der Vaterklasse wird von der Kindklasse aus aufgerufen !!


Child Class overrides method of the Base Class and calls the method of the Base class:


Die Kindklasse ERWEITERT die Methode der Basisklasse.
Die Kindklasse ERGÄNZT die Methode der Basisklasse.

The Child Class EXTENDS the corresponding method of the Base Class.

=========================================================================


Ausgangssituation:


2 Klassen in einer Hierarchie:

Eine Methode 'draw' in der Vater- und in der Kind-Klasse:

Feature: Vererbung.

Virtuelle Methodenaufruf Mechanismus:

Virtual Method Invocation Mechanims:

Was bedeutet das:

== Aufruf einer Methode: Kann zur Übersetzungs-Zeit festgelegt werden.
                                  Compile-Time

== Aufruf einer Methode: Kann zur Laufzeit-Zeit festgelegt werden.
                                  Runtime


== Compile-Time: Early-Binding

== Runtime: Late-Binding

Vorteil // Nachteil:

Performance:


Early-Binding:

DIREKTER AUFRUF

00007FF7C3A4D28F  mov         rcx,qword ptr [rp]  
00007FF7C3A4D293  call        Rectangle::draw (07FF7C3A41B77h)  


versus

Late-Binding:

INDIREKTER AUFRUF

00007FF6B120D28F  mov         rax,qword ptr [rp]  
00007FF6B120D293  mov         rax,qword ptr [rax]  
00007FF6B120D296  mov         rcx,qword ptr [rp]  
00007FF6B120D29A  call        qword ptr [rax]  

Wo steht die Adresse der Methode:

Tabellen:  vtable // virtual function pointer table


Why ???????????????????????????????????????????????

Mit Virtuellen Methoden kann ich 

A) Container (Array) von Adressen von vielen verschiedenen Objekten bilden.

B) Auf Grund der Hierarchie:  Typ der Elemente ist vom Basisklassentyp (Pointer/Referenz)

C) Es werden über EINEN Methodennamen UNTERSCHIEDLICHE Methoden aufgerufen.
   (virtual)

Viele:  Griechisch:    POLY

die Gestalt:  Griechisch: Körper:  MORPHUS

Polymorphismus

Aber / Vorsicht:

Ein Zeiger der Basisklasse:

Auch wenn in der Kindklasse viele, andere Methoden vorhanden sind:

Über den Zeiger der Basisklasse erreiche ich AUSSCHLIEßLICH die
Methoden der Vaterklasse !!!

// ===============================================================

Design:

SW-Entwurf:   Konzepte der OO Programmierung unterstützen das Design.

== Abstrakte Basisklasse

== Schnittstellenkonzept

// ===============================================================

    Rectangle

    ColoredRectangle
    TransparentRectangle
    RoundRectangle

Rectangle:

==> Helfer - Klasse:

== Sie verwaltet gemeinsame Daten ALLER Rechtecke (x, y, width, height)

== Sie besitzt / vererbt Methoden, die für alle Kindklassen eine Unterstützung sind

== Von der Helfer - Klasse sollte man KEIN Objekt anlegen können.

== Sie macht VORGABEN für das Design der Kindklassen: 

   She makes rules for the Design of Child Classes:

   Contract // Rule

   EG: Which methods child classes should have !!!
   Welche Methoden sollten KINDKLASSEN haben.
   Example: draw

IN UNSEREM BEISPIEL: draw ergibt KEINEN Sinn for Rectangle


Wie kann eine Basisklasse  Vorgaben für Kindeklassen machen:

    virtual void draw() = 0;

==> Damit eine Kindklasse instanziiert werden kann,
 
    muss die draw-Methode vorhanden / realisiert sein !!!!


Fazit:  Eine derartige Helfer-Klasse wird als ABSTRAKTE KLASSE bezeichnet.


Andere Formulierung: Eine abstrakte Klasse ist eine UNVOLLSTÄNGIGE KLASSE.


// ===============================================================

==  VORGABEN für das Design der Kindklassen: 

   Contract // Rule:

   Beispiel: draw  // abstrakte Methode // nicht-vorhanden,

            aber Klassen, die den Vertrag mit der Basisklasse eingehen,
            müssen draw realisieren.

Interface Concept:

Schnittstellenkonzept:

Es werden in einer Schnittstelle Vorgaben für Methoden gemacht.


// ===============================================================

// Was kann ich mit einer Schnittstelle anfangen

===>   Fabrik

Entkopplung von Software - Modulen.

// ===============================================================

Nachtrag:

    class Account : public IAccount

Hmm, in C++ gibt es mehrere Arten der Vererbung:

    class Account : private IAccount
    class Account : protected IAccount

    class Account : public IAccount      // öffentliche Vererbung



To keep it simple:

In allen anderen gängigen Programmiersprachen:

// ===============================================================

Nachtrag:

virtual in der Basisklasse:

Muss ich es dann in der Kindklasse auch hinschreiben ???

a) Müssen nicht:  "Einmal virtual - immer virtual"


Die Schlüsselwörter override und final tragen zur besseren

Qualität der Software bei !!!

// ===============================================================


Idee:

A) IAccount:  Beschreibt die Methoden aller Konten

   Kontrakt

b) Class Account:  Helfer-Klasse / Abstrakt

        int m_accountNumber;
        double m_balance;

    Nicht: Zinsen, Dispo, ......

    Methoden:

    getter:
        // passt hier !!!
        double getAccountNumber() final  override;
        double getBalance() final override;

    Frage:
    Welche der anderen Methoden ???

    Einzahlen und Abheben:
    == Einzahlen:   geht immer
    == Abheben:     Geht hier nicht, weil es vom Kontotyp abhängt.

c) Konkrete Klassen

Vollständig:  print und withdraw vorhanden


======================================================

Templates // Schablonen:

Paradigmen:

== Objekt-Orientierung
== Prozedurale Programmierung (  geerbt by C)
== Generische Programmierung (Idee von Alexander Stepanov)

Nebenby:

Bjarne Stroustrup:  Erfinder von C++
Alexander Stepanov: Generische Programmierung

Stroustrup: "C with Classes", nehme deine Ideen für die Bibliothek.


======================================================

Idee der Generische Programmierung:

A)
Man erstelle Klassen nicht mit realen, konkreten Datentypen,

sondern mit Stellvertretern für einen jeweiligen Datentyp.

Keine konkrete Klasse, sondern eine Vorlage für eine konkrete Klasse

Vorlage:  Schablone // Template



B)
Konkrete Klasse  ==> Muss dem Stellvertreter einen konreten Typ zuweisen / zuordnen.


Wenn für ein T eine Methode / eine Klasse nicht passt:

Explizit Template Spezialsierung:

Am Beispiel des Taschenrechners für T == int und die Methode div:

2 Möglichkeiten:

a) die ganze Klasse

b) nur eine oder mehrere Methoden


=============================================================

Die Standardbibliothek:

Alexander Stepanov:

== Container
== Iteratoren
== Algorithmen
== Funktor (Lambda)

== STL: Eigene Stilistik

Grund:  Verschiedene Container für Daten.

Beispiel: Das C/C++ Array (Fixed Length)

   ==> Weiteres Array: Vektor (Length arbitrary)
   
   ==> Set (Menge): Sammelt Daten, aber keine "doppelten"

   ==> Bäume (Trees), Hash Tabellen, Listen, ...

Eigene Stilistik: Stellt eine Verallgemeinerung für all diese Container dar.

Stellt eine Abstraktion dar.

======================

Erstes Beispiel:

    for (int i = 0; i < vec.size(); ++i) {

        std::cout << i << ": " << vec[i] << std::endl;
    }

Hat vor dem Hintergrund der Bibliothek EINEN GRAVIERENDEN Nachteile:

Index-Operator:  für einen Baum:  tree [3]

=================================================================================

Für den allgemeinen Zugriff auf einen Container musste - als Ersatz für den Index - 

ein allgemeineres Konzept erfunden werden:

Name:  Iteratoren Konzept

=================================================================================

Was ist ein Iterator

What is an Iterator:

>>> Objekt / Object

>>> Ein Iterator beschreibt eine POSITION.

(( Nicht verwechseln: Eine POSITION ist nicht zu verwechseln mit dem ELEMENT an dieser Position ))

Wie komme ich an so einen Iterator:

Für die erste Kontaktaufnahme mit einem Container
gibt es ZWEI Iteratoren:

>> Anfang / Begin
>> End / End

Beachte: End ist eine Position NACH DEM LETZEN ELEMENT  ("Nirvana")

Wie geht es weiter ???

Jeder Iterator besitzt Methoden / Operatoren:

i) operator ++:    Geht von einer Position zur nächsten.

ii) operator *:   Liefert den Wert an der Position zurück. 
                  Returns Value at this Position

    Anmerkung: a) Dieser operator* HAT NICHTS MIT einem Pointer/ Zeiger zu tun (Derefenzieren)
               b) ABER: Es soll natürlich eine ANALOGY vorhanden sein.

iii)  Zwei Positionen vergleichen / Comparing two positions:

operator ==, !=:



Von welchem Typ ist ein Iterator ?????????????????

a) class Iterator       Hmmm: Container:  std::vector <INT>

b) class Iterator<T>    Hmmm: Intern sind ein Vektor und ein Tree komplett verschieden

c) Jeder Container muss seine eigene Realisierung eines Iterators MITBRINGEN.

  Typ des Iterators ist IN DER KLASSE des Containers definiert.

  Example:  std::vector<int>::iterator

// ============================================================

== Algorithmen // Algorithm

Einfache Abläufe, um mit einem Container etwas zu tun:  Traversieren, Suchen , kopieren, umwandeln,

1. Example: Traversal


// ============================================================


std::vector:

newCapacity = oldCapacity * 1.5;

// ============================================================

    for (int i = 0; i < 100; ++i) {
        vec[i] = 1;
    }

    // Or

    std::fill(vec.begin(), vec.end(), 2);


    PERFORMANCE ===> Choose 2. Alternative !!!!!!!!!!!!

>>> std::memset

>>> Zum Beispiel:
 
    The REP prefixes apply only to one string instruction at a time. To repeat a block of instructions, use the LOOP instruction or another looping construct. 

// ============================================================

Algorithmen:

Häufig:

== Algorithmen haben eine Funktion als Parameter für eine bestimmte Rechenverarbeitung.

== Beispiel:

int func() {

    static int i = -1;
    ++i;
    return 2 * i + 1;
}

Dies ist eine machbare Lösung, ABER:

Sie ist unschön, WHY:

Irgenwie werden globale Variablen benötigt (==> Zustand // State) ,
aber globale Variablen sind NICHT SCHÖN.


C++ // OO:

2. Ansatz:

Wir wechseln zu einer Klasse:

Diese Klasse besitzt eine Methode, die - wie die globale Funktion - 
die Berechung des nächsten Werts vornimmt.

Problem: Whats the name of this method ??????????

Answer: We DON'T use a method, we use an operator 

Deutsch: Aufruf-Operator

Englisch: Function Call Operator () 




Nomenklatur:

Besitzt / Implementiert ein Objekt / eine Klasse den  Aufruf-Operator,

spricht man von so genannten "aufrufbaren Objekte"

==> Callable Objects  // Funktor // functor


// ============================================================

Ausblick:  Funktor bzw. Callable Object VERSUS Lambda

>> Sprung nach Modern C++: Ab C++ 11 und höher

Erweiterung von C++ ab dem Jahr 2011

Wording:

"Lambda Function"

In my Wording:  WRONG

"Lambda Object" !!!!!!!!!!!!! ===> There can be instance variables.

Compact, compact syntax:  [  a_name = preset_value ]  ======> declared an instance variable 'a_name'

// ============================================================

Übung:

a) std::vector

   push_back

   std::for_each

b) std::vector

   std::generate vorbelegen

   >> Funktor // Callable Object:   "merken kann" // "store something in the state" // member data

   Lambda not required


A) Zahlenfolge:

   

   int n ; start value eg 7
   Next Element of this sequence:

   ===> a) n is even:    n = n / 2
   ===> n) n is uneven:  n = 3 * n + 1

   Example: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1, // 4, 2, 1

   Aussage: Die Folge endet mit dem Wert 1.

   Berechnung dieser Wert eher in einer STL-freie Zone.

   std::vector: DIent dem Zweck die Folge abzuspeichern.

B) Fibonacci

Achtung:

    std::vector<int> vec;

    vec.resize(20);  ==>  Dies bedeutet, dass in std::generator das "Callable Object"

    20 Mal aufgerufen wird

    ==> die ersten 20 Werte berechnet werden.










